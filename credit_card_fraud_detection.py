# -*- coding: utf-8 -*-
"""Credit Card Fraud detection

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-5CcsI7f1VaHnJ9zgiM2xcNI9uS7ZrqI
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score
from sklearn.neighbors import KNeighborsClassifier
from sklearn.ensemble import RandomForestClassifier
import seaborn as sns
from sklearn.preprocessing import StandardScaler

"""## **Dataset** **Analysis**"""

credit = pd.read_csv('/content/creditcard.csv')
credit.head(100)

credit.tail(10)

credit.shape

print("Fraud Transactions: " + str(len(credit[credit["Class"] == 1])))
print("Legit Transactions: " + str(len(credit[credit["Class"] == 0])))
print("Proportion of Fraudulent Cases: " + str(len(credit[credit["Class"] == 1])/ credit.shape[0]))

# To see how small are the number of Fraud transactions
data_p = credit.copy()
data_p[" "] = np.where(data_p["Class"] == 1 ,  "Fraud", "Legit")

# plot a pie chart
data_p[" "].value_counts().plot(kind="pie")

data_p[" "].value_counts().plot(kind="bar")

co =credit.corr()
sns.heatmap(co, cmap = 'YlGnBu')

print(co)

"""# **DATA Preprocessing**"""

credit.isnull().sum()

print("Number of rows with null values in Amount column: ", credit['Amount'].isnull().sum())

credit_subset = credit[credit['Amount'].notnull()]
print("Shape after removing null values: ", credit_subset.shape)

sc = StandardScaler()
amount = credit_subset['Amount'].values
credit_subset['Amount'] = sc.fit_transform(amount.reshape(-1, 1))

credit_subset.drop(['Time'], axis=1, inplace=True)
# check for duplicate values
print("\n Before removing duplicate data: ",credit_subset.shape)
credit_subset.drop_duplicates(inplace=True)
print("\n after removing duplicate data: ",credit_subset.shape)

credit_subset.info()

#number of legit transaction and fraud transaction
credit_subset['Class'].value_counts()

lgt = credit_subset[credit_subset.Class == 0]
frd = credit_subset[credit_subset.Class == 1]

print(lgt.shape)
print(frd.shape)

lgt.Amount.describe()

frd.Amount.describe()

"""Here  we can see the dataset is highly imbalanced

Because of imbalanced data we need to do under sampling for the legit transaction
"""

lgt_new = lgt.sample(n=473)

credit_new = pd.concat([lgt_new, frd], axis=0)

credit_new.tail()

credit_new['Class'].value_counts()

#showing mean values of all features grouped by class
credit_subset.groupby('Class').mean()

credit_new.groupby('Class').mean()

"""# **Test Train**"""

X = credit_new.drop(columns='Class', axis=1)
Y = credit_new['Class']

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.3, stratify=Y, random_state=2)

print(X.shape, X_train.shape, X_test.shape)

"""# **Model -> logistic regression**"""

lr = LogisticRegression()

lr.fit(X_train, Y_train)

X_train_prediction = lr.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)

print('Accuracy on Training data : ', training_data_accuracy)

"""test

"""

X_test_prediction = lr.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction, Y_test)

print('Accuracy score on Test Data : ', test_data_accuracy)

"""# **Model -> KNN**"""

n = 3
KNN = KNeighborsClassifier(n_neighbors = n)
KNN.fit(X_train, Y_train)
knn_pred = KNN.predict(X_train)
training_data_accuracy_knn = accuracy_score(knn_pred, Y_train)
print('Accuracy on Training data for knn : ',training_data_accuracy_knn )

X_test_prediction_knn = KNN.predict(X_test)
test_data_accuracy_knn = accuracy_score(X_test_prediction_knn, Y_test)
print('Accuracy score on Test Data for knn : ', test_data_accuracy_knn)

"""# **Model -> RFC**"""

rf = RandomForestClassifier(max_depth = 4)
rf.fit(X_train, Y_train)
rf_pred = rf.predict(X_train)
training_data_accuracy_rf = accuracy_score(rf_pred, Y_train)
print('Accuracy on Training data for rf : ',training_data_accuracy_rf )

X_test_prediction_rf = rf.predict(X_test)
test_data_accuracy_rf = accuracy_score(X_test_prediction_rf, Y_test)
print('Accuracy score on Test Data : ', test_data_accuracy_rf)